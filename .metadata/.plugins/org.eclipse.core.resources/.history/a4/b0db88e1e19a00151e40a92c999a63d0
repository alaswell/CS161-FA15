// Alex Laswell
// CS161
// Project 6

public class LinkedList<T extends Comparable <T>> implements LinkedList161<T>
{
	Node<T> head; 
	protected int size;

	public LinkedList()
	{
		head = null;
		size = 0;
	}

	public void addFirst(T item)
	{
		head = new Node(item, head);
		size++;
	}

	public int size() { return size; }
	
	public void clear()
	{
		head = null;
		size = 0;
	}

	// Add a new Node contaning item to the linked list at index
	public void add(T item, int index)
	{
		if(index < 0 || index > size)
			throw new IndexOutOfBoundsException("out of bounds");
		if(index == 0)
			addFirst(item);
		else
		{
			Node<T> current = head;
			
			for(int i = 0; i < index-1; i++)
				current = current.getNext(); // get to position
			current.setNext(new Node(item, current.getNext()));
		}
		size++;
	}

	// Remove Node at index
	public void remove(int index)
	{
		if(index < 0 || index > size)
			throw new IndexOutOfBoundsException("out of bounds");
		if(index == 0)
			head = head.getNext();
		else
		{
			Node<T> current = head;
			
			for(int i = 0; i < index -1; i++)	
				current = current.getNext();
			current.setNext(current.getNext().getNext());
		}
		size--;
	}

	public T get(int index)
	{	
		if(index < 0 || index > size)
			throw new IndexOutOfBoundsException("out of bounds");
		Node<T> current = head;
		
		for(int i = 0; i < index; i++)
			current = current.getNext();
		return current.getItem();
	}

	public void sort()
	{
		//Bubble sort is fun
		for(int i = size-1; i >= 0; i--)
		{
			Node<T> current = head;
			boolean didSwap = false;
			for(int j = 0; j < i; j++)
			{
				Node<T> pNext = current.getNext();
				if(current.getItem().compareTo(pNext.getItem())> 0)
				{
					swap(current, pNext);
					didSwap = true;
				}	
				current = current.getNext();
			}
			if(!didSwap)
				return;
		}		
	}

	private void swap( Node<T> a, Node<T> b)
	{
		T tmp = a.getItem();
		a.setItem(b.getItem());
		b.setItem(tmp);
	}

	@Override
	public String toString()
	{
		String result = "";
		
		if(head == null)
			return result;
		for(Node<T> n = head; n != null; n = n.getNext())
			result += n.getItem() + "\n";
		return result.substring(0, result.length()-1); // remove last '\n'
	}
}
